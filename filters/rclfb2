#!/bin/sh
# @(#$Id: rclopxml,v 1.3 2008-10-08 08:27:34 dockes Exp $  (C) 2004 J.F.Dockes
#================================================================
# Extract text from an fb2 ebook (xml)
#================================================================

# set variables
LANG=C ; export LANG
LC_ALL=C ; export LC_ALL
progname=rclfb2
filetype=fb2


#RECFILTCOMMONCODE
##############################################################################
# !! Leave the previous line unmodified!! Code imported from the
# recfiltcommon file

# Utility code common to all shell filters. This could be sourced at run
# time, but it's slightly more efficient to include the code in the
# filters at build time (with a sed script).

# Describe error in a way that can be interpreted by our caller
senderror()
{
    echo RECFILTERROR $*
    # Also alert on stderr just in case
    echo ":2:$progname::: $*" 1>&2
    exit 1
}

iscmd()
{
    cmd=$1
    case $cmd in
    */*)
	if test -x $cmd -a ! -d $cmd ; then return 0; else return 1; fi ;;
    *)
      oldifs=$IFS; IFS=":"; set -- $PATH; IFS=$oldifs
      for d in $*;do test -x $d/$cmd -a ! -d $d/$cmd && return 0;done
      return 1 ;;
    esac
}

checkcmds()
{
    for cmd in $*;do
      if iscmd $cmd 
      then 
        a=1
      else 
        senderror HELPERNOTFOUND $cmd
      fi
    done
}

# show help message
if test $# -ne 1 -o "$1" = "--help" 
then
  echo "Convert a $filetype file to HTML text for Recoll indexing."
  echo "Usage: $progname [infile]"
  exit 1
fi

infile="$1"

# check the input file existence (may be '-' for stdin)
if test "X$infile" != X- -a ! -f "$infile"
then
  senderror INPUTNOSUCHFILE "$infile"
fi

# protect access to our temp files and directories
umask 77

##############################################################################
# !! Leave the following line unmodified !
#ENDRECFILTCOMMONCODE

checkcmds xsltproc

xsltproc --nonet --novalid - "$infile" <<EOF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:fb="http://www.gribuser.ru/xml/fictionbook/2.0"
  exclude-result-prefixes="fb"
  >

<xsl:output method="html" encoding="UTF-8"/>

<xsl:template match="/fb:FictionBook">
 <html>
  <xsl:apply-templates select="fb:description"/>
  <xsl:apply-templates select="fb:body"/>
 </html>
</xsl:template>

<xsl:template match="fb:description">
  <head>
    <xsl:apply-templates select="fb:title-info"/>
  </head><xsl:text>
</xsl:text>
</xsl:template>

<xsl:template match="fb:description/fb:title-info">
    <xsl:apply-templates select="fb:book-title"/>
    <xsl:apply-templates select="fb:author"/>
</xsl:template>

<xsl:template match="fb:description/fb:title-info/fb:book-title">
<title> <xsl:value-of select="."/> </title>
</xsl:template>

<xsl:template match="fb:description/fb:title-info/fb:author">
  <meta>
  <xsl:attribute name="name">author</xsl:attribute>
  <xsl:attribute name="content">
     <xsl:value-of select="fb:first-name"/><xsl:text> </xsl:text>
     <xsl:value-of select="fb:middle-name"/><xsl:text> </xsl:text>
     <xsl:value-of select="fb:last-name"/>
  </xsl:attribute>
  </meta>
</xsl:template>

<xsl:template match="fb:body">
 <body>
 <xsl:apply-templates select="fb:section"/>
 </body>
</xsl:template>

<xsl:template match="fb:body/fb:section">
  <xsl:for-each select="fb:p">
  <p><xsl:value-of select="."/></p>
  </xsl:for-each>
</xsl:template>

</xsl:stylesheet>
EOF
