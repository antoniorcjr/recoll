#!/bin/sh
# @(#$Id: rclps,v 1.10 2007-06-08 13:51:09 dockes Exp $  (C) 2004 J.F.Dockes
# Parts taken from Estraier:
#================================================================
# Estraier: a personal full-text search system
# Copyright (C) 2003-2004 Mikio Hirabayashi
#================================================================
#================================================================
# Extract text from a postscript file by executing pstotext or ps2ascii. 
#
# The default is to use pstotext which can deal with accents, but in a
# partially broken way (it always outputs iso8859-1, when it should use utf.
#
# OTOH, ps2ascii is much faster, comes with ghostscript, and sometimes work
# better (ie: on some openoffice output files).
#
#================================================================

# set variables
LANG=C ; export LANG
LC_ALL=C ; export LC_ALL
progname="rclps"
decoder=pstotext
#decoder=ps2ascii
filetype=postscript


#RECFILTCOMMONCODE
##############################################################################
# !! Leave the previous line unmodified!! Code imported from the
# recfiltcommon file

# Utility code common to all shell filters. This could be sourced at run
# time, but it's slightly more efficient to include the code in the
# filters at build time (with a sed script).

# Describe error in a way that can be interpreted by our caller
senderror()
{
    echo RECFILTERROR $*
    # Also alert on stderr just in case
    echo ":2:$progname::: $*" 1>&2
    exit 1
}

iscmd()
{
    cmd=$1
    case $cmd in
    */*)
	if test -x $cmd -a ! -d $cmd ; then return 0; else return 1; fi ;;
    *)
      oldifs=$IFS; IFS=":"; set -- $PATH; IFS=$oldifs
      for d in $*;do test -x $d/$cmd -a ! -d $d/$cmd && return 0;done
      return 1 ;;
    esac
}

checkcmds()
{
    for cmd in $*;do
      if iscmd $cmd 
      then 
        a=1
      else 
        senderror HELPERNOTFOUND $cmd
      fi
    done
}

# show help message
if test $# -ne 1 -o "$1" = "--help" 
then
  echo "Convert a $filetype file to HTML text for Recoll indexing."
  echo "Usage: $progname [infile]"
  exit 1
fi

infile="$1"

# check the input file existence (may be '-' for stdin)
if test "X$infile" != X- -a ! -f "$infile"
then
  senderror INPUTNOSUCHFILE "$infile"
fi

# protect access to our temp files and directories
umask 77

##############################################################################
# !! Leave the following line unmodified !
#ENDRECFILTCOMMONCODE

checkcmds $decoder iconv awk

# output the result
# The strange 'BEGIN' setup is to prevent 'file' from thinking this file
# is an awk program
$decoder "$infile" |
awk 'BEGIN'\
' {
  printf("<html><head><title></title>\n")
  printf("<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n")
  printf("</head>\n<body><p>");
  doescape = 1
  cont = ""
}
{
    $0 = cont $0
    cont = ""

    if ($0 == "\f") {
       print "</p>\n<hr>\n\f<p>"
       next
    } else if ($0 ~ /­$/) {
      # Note : soft-hyphen is iso8859 0xad
      # Break at last whitespace
      match($0, "[ \t][^ \t]+$")
      line = substr($0, 0, RSTART)
      cont = substr($0, RSTART, RLENGTH)
      $0 = line
      gsub("­", "", cont)
    }

    if(doescape > 0) {
      gsub(/&/, "\\&amp;", $0)
      gsub(/</, "\\&lt;", $0)
      gsub(/>/, "\\&gt;", $0)
    }
    print $0 "<br>"
}
END {
    print "</p></body></html>"
}' | iconv -f iso-8859-1 -t UTF-8 -c -s 

